# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Arch-2-CosmoBattle - CMake on a single platform

on:
  #label:
  #  types: [created, edited]
  push:
    branches: [ "master" ]
    #paths:
    #- 'Arch-2-CosmoBattle/**'
  pull_request:
    branches: [ "master" ]
    #paths:
    #- 'Arch-2-CosmoBattle/**'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}/Arch-2-CosmoBattle/CosmoBattle
  TESTS_DIR: ${{github.workspace}}/Arch-2-CosmoBattle/Tests
  

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Project - Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake ${{env.SOURCE_DIR}} -B ${{env.SOURCE_DIR}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Project - Build
      # Build your program with the given configuration
      run: cmake --build ${{env.SOURCE_DIR}}/build --config ${{env.BUILD_TYPE}}

    - name: Tests - Configure CMake
      run: cmake ${{env.TESTS_DIR}} -B ${{env.TESTS_DIR}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
    - name: Tests - Build
      run: cmake --build ${{env.TESTS_DIR}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Tests - Process
      run: ctest -C ${{env.BUILD_TYPE}} --progress --test-dir ${{env.TESTS_DIR}}/build
